#!/usr/bin/env python3

import platform
import socket
import psutil
import subprocess
import time
import argparse
import json
import shutil
import os
import sys
import logging
from pathlib import Path
from functools import lru_cache

VERSION = "1.2"
CONFIG_DIR = Path.home() / '.config' / 'pyrfetch'
CACHE_DIR = CONFIG_DIR / 'cache' 
LOG_FILE = CONFIG_DIR / 'sysinfo.log'

COLORS = {
    "default": "\033[0m",
    "white": "\033[37m",
    "red": "\033[31m",
    "green": "\033[32m",
    "yellow": "\033[33m",
    "blue": "\033[34m",
    "purple": "\033[35m",
    "cyan": "\033[36m",
    "pink": "\033[95m",
    "orange": "\033[91m",
    "lime": "\033[92m",
    "azure": "\033[94m",
    "magenta": "\033[95m",
    "turquoise": "\033[96m",
    "bright_white": "\033[97m",
    "bright_red": "\033[91m",
    "bright_green": "\033[92m",
    "bright_yellow": "\033[93m",
    "bright_blue": "\033[94m",
    "bright_magenta": "\033[95m",
    "bright_cyan": "\033[96m",
    "bold": "\033[1m",
    "dim": "\033[2m",
    "italic": "\033[3m",
    "underline": "\033[4m",
    "blink": "\033[5m",
    "reverse": "\033[7m",
    "hidden": "\033[8m",
    "strike": "\033[9m"
}

DISTRO_COLORS = {
    "Arch": COLORS["bright_cyan"],
    "Gentoo": COLORS["dim"],
    "Ubuntu": COLORS["orange"],
    "Fedora": COLORS["cyan"],
    "Kali": COLORS["blue"],
    "macOS": COLORS["pink"],
    "Debian": COLORS["bright_red"],
    "Mint": COLORS["bright_green"],
    "Pop": COLORS["bright_blue"],
    "Manjaro": COLORS["green"],
    "Endeavour": COLORS["purple"],
    "OpenSUSE": COLORS["lime"],
    "RedHat": COLORS["red"],
    "Zorin": COLORS["blue"],
    "Default": COLORS["default"]
}

ASCII_ARTS = {
    "Arch": [
        "      /\\           ",
        "     /  \\          ",
        "    /    \\         ",
        "   /      \\        ",
        "  /   ,,   \\       ",
        " /   |  |   \\      ",
        "/_-''    ''-_\\     "
    ],
    "Gentoo": [
        "   .-----.         ",
        " ./       \\.       ",
        "/   .---.   \\      ",
        "|  /     \\  |      ",
        "|  \\     /  |      ",
        "\\   `---'   /      ",
        " `.___.__.'        "
    ],
    "Ubuntu": [
        "    _____         ",
        "   /  __ \\        ",
        "  |  /  \\ |       ",
        "  |  \\__/ |       ",
        "   \\_____/        ",
        "                  ",
        "                  "
    ],
    "Fedora": [
        "      _____       ",
        "     /   __\\      ",
        "    |  /          ",
        "    |  \\___       ",
        "    |  ____\\      ",
        "    |  |          ",
        "     \\__\\         "
    ],
    "Kali": [
        " __         __    ",
        " \\ \\       / /    ",
        "  \\ \\.---./ /     ",
        "  |  _   _  |     ",
        "  |   \\ /   |     ",
        "  |   O O   |     ",
        "   \\  \\^/  /      ",
        "    \\     /       ",
        "     `---'        "
    ],
    "macOS": [
        "         /\\       ",
        "        /_/       ",
        "   ____   ____    ",
        "  /    \\_/    \\   ",
        "  |          __|  ",
        "  |         /     ",
        "  |         \\_    ",
        "   \\     _    |   ",
        "     \\__/ \\___/   "
    ],
    "Debian": [
        "        ____          ",
        "       /  __ \\        ",
        "      |  /   |        ",
        "      |  \\___/        ",
        "      \\               ",
        "       \\__            ",
        "                      "
    ],
    "Mint": [
        " _    ___________    ",
        "| |  /  __    _   \\  ",
        "| |  | |  |  | |  |  ",
        "| |  | |  |  | |  |  ",
        "| |  | |  |  | |  |  ",
        "| |  | |  |  | |  |  ",
        "| |  |_|  |__| |  |  ",
        "| \\____________|  |  ",
        "\\_________________|  "
    ],
    "Pop": [
        "                  ",
        "  ▄█████▄▄ ██     ",
        "  ██    ██ ██     ",
        "  ██    ██ ██     ",
        "  ██████▀▀ ██     ",
        "  ██              ",
        "  ██       ██     "
    ],
    "Manjaro": [
        "█████████ ████    ",   
        "████▀▀▀▀▀ ████    ", 
        "████ ████ ████    ", 
        "████ ████ ████    ",  
        "████ ████ ████    ",  
        "████ ████ ████    "
    ],
    "EndeavourOS": [
        "                    ",
        "      //\\           ",
        "    / /  \\\\         ",
        "   / /    \\ \\       ",
        "  / /      \\  \\     ",
        " / /        \\  \\    ",
        "/_/__________\\  |   ",
        " /_____________/    "
    ],
    "OpenSUSE": [
        "   _______       ",
        "  /       \\      ",
        " /    __   \\     ",
        "|   /  \\   |     ",
        "|   \\__/   |     ",
        " \\         /     ",
        "  \\_______/      "
    ],
    "RedHat": [
        "                  ",
        "                  ",
        "     RED HAT      ",  
        "      _____       ",  
        "    _|     |__    ",  
        "   \\_________/    ", 
        "                  "
    ],
    "Zorin": [
        "                  ",
        "                  ",
        "    ▀▀▀▀▀▀▀██     ",
        "         ██       ",
        "       ██         ",
        "     ██           ",
        "    ▀▀▀▀▀▀▀▀▀     "
    ],
    "Default": [
        "   _______       ",
        "  |       |      ",
        "  |  [ ]  |      ",
        "  |       |      ",
        "  |  ___  |      ",
        "  | |   | |      ",
        "  |_|   |_|      "
    ]
}

class SystemInfo:
    def __init__(self):
        self._setup_once()
        
    @lru_cache(maxsize=1)
    def _setup_once(self):
        CONFIG_DIR.mkdir(parents=True, exist_ok=True)
        CACHE_DIR.mkdir(parents=True, exist_ok=True)
        logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                          format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger('SystemInfo')
        
    @lru_cache(maxsize=1)
    def get_os_name(self):
        try:
            return platform.freedesktop_os_release().get("PRETTY_NAME", "Default").split()[0]
        except Exception:
            return "macOS" if platform.system() == "Darwin" else "Default"

    def get_cpu_info(self):
        if hasattr(self, '_cpu_info'):
            return self._cpu_info
            
        if platform.system() == "Darwin":
            try:
                result = subprocess.run(["sysctl", "-n", "machdep.cpu.brand_string"],
                                     capture_output=True, text=True, timeout=1)
                if result.returncode == 0:
                    self._cpu_info = result.stdout.strip()
                    return self._cpu_info
            except:
                pass

        try:
            with open("/proc/cpuinfo", "r") as f:
                for line in f:
                    if "model name" in line:
                        self._cpu_info = line.split(":", 1)[1].strip()
                        return self._cpu_info
        except:
            pass
            
        self._cpu_info = "Unknown CPU"
        return self._cpu_info

    @lru_cache(maxsize=1)
    def get_gpu_info(self):
        if shutil.which("nvidia-smi"):
            try:
                result = subprocess.run(["nvidia-smi", "--query-gpu=name", "--format=csv,noheader"],
                                     stdout=subprocess.PIPE, text=True, check=True, timeout=1)
                if result.stdout.strip():
                    return result.stdout.strip()
            except:
                pass

        try:
            result = subprocess.run(["lspci"], stdout=subprocess.PIPE, text=True, check=True, timeout=1)
            for line in result.stdout.splitlines():
                if "VGA" in line or "3D controller" in line:
                    return line.split(":", 2)[2].strip()
        except:
            pass
            
        return "Integrated Graphics"

    def get_network_info(self):
        if hasattr(self, '_network_info'):
            return self._network_info
            
        self._network_info = {}
        try:
            for iface, addrs in psutil.net_if_addrs().items():
                for addr in addrs:
                    if addr.family == socket.AF_INET:
                        self._network_info[iface] = addr.address
        except Exception as e:
            self.logger.error(f"Network error: {e}")
        return self._network_info

    def get_battery_info(self):
        try:
            battery = psutil.sensors_battery()
            if battery:
                return f"{battery.percent}% {'(Charging)' if battery.power_plugged else ''}"
        except:
            pass
        return "N/A"

    def get_system_info(self, show_percentage=False, include_disk=False, include_temp=False,
                       export_file=None, distro=None, color="default", ascii="default"):
        os_name = distro if distro else self.get_os_name()
        ram = psutil.virtual_memory()
        ram_info = f"{ram.percent}%" if show_percentage else f"{ram.used/(1024**3):.1f}GB/{ram.total/(1024**3):.1f}GB"

        info = [
            os_name,
            platform.release(),
            socket.gethostname(),
            self.format_uptime(int(time.time() - psutil.boot_time())),
            ram_info,
            self.get_cpu_info(),
            self.get_gpu_info(),
            self._get_disk_info() if include_disk else "N/A",
            self._get_temp_info() if include_temp else "N/A",
            "",
            ""
        ]

        self._print_output(info, os_name, ascii, color)
        
        if export_file:
            self._export_info(info, export_file)

    def _get_disk_info(self):
        disk = psutil.disk_usage('/')
        return f"{disk.used/(1024**3):.1f}/{disk.total/(1024**3):.1f}GB ({disk.percent}%)"

    def _get_temp_info(self):
        try:
            sensors = psutil.sensors_temperatures()
            if 'coretemp' in sensors:
                return f"{sensors['coretemp'][0].current}°C"
        except:
            pass
        return "N/A"

    def format_uptime(self, seconds):
        days, remainder = divmod(seconds, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{days}d {hours}h {minutes}m" if days else f"{hours}h {minutes}m {seconds}s"

    def _print_output(self, info, os_name, ascii, color):
        ascii_art = (ASCII_ARTS.get(os_name, ASCII_ARTS["Default"]) 
                    if ascii == "default" else self._read_ascii_file(ascii))
        color_code = (DISTRO_COLORS.get(os_name, COLORS["default"]) 
                     if color == "default" else COLORS.get(color, COLORS["default"]))

        labels = ["OS: ", "Kernel: ", "Hostname: ", "Uptime: ", "RAM: ", 
                 "CPU: ", "GPU: ", "Disk: ", "Temp: ", "", ""]

        print("")
        for i, art_line in enumerate(ascii_art):
            info_line = info[i] if i < len(info) else ""
            label = labels[i] if i < len(labels) else ""
            print(f"{color_code}{art_line}{label}{COLORS['default']}{info_line}")
        print("")

    def _read_ascii_file(self, ascii_path):
        try:
            with open(ascii_path) as f:
                return [line.rstrip() for line in f]
        except Exception as e:
            self.logger.error(f"ASCII file error: {e}")
            return ASCII_ARTS["Default"]

    def _export_info(self, info, export_file):
        export_data = dict(zip(
            ["OS", "Kernel", "Hostname", "Uptime", "RAM", "CPU", "GPU", "Disk", "Temp"],
            info[:9]
        ))
        with open(export_file, 'w') as f:
            json.dump(export_data, f, indent=2)

def main():
    parser = argparse.ArgumentParser(description="Display system information with ASCII art")
    parser.add_argument("--percentage", action="store_true", help="Show RAM usage as percentage")
    parser.add_argument("--disk", action="store_true", help="Include disk information")
    parser.add_argument("--temp", action="store_true", help="Include temperature information")
    parser.add_argument("--export", type=str, help="Export information to JSON file")
    parser.add_argument("--distro", type=str, choices=ASCII_ARTS.keys(), help="Manually specify distribution")
    parser.add_argument("--color", type=str, choices=COLORS.keys(), default="default", help="Choose ASCII art color")
    parser.add_argument("--watch", action="store_true", help="Watch mode with live updates")
    parser.add_argument("--interval", type=int, default=2, help="Update interval for watch mode")
    parser.add_argument("--ascii", type=str, default="default", help="Path to a .txt containing ascii")
    
    args = parser.parse_args()
    sys_info = SystemInfo()
    try:
        while True:
            sys_info.get_system_info(
                args.percentage, args.disk, args.temp,
                args.export, args.distro, args.color, args.ascii
            )
            if not args.watch:
                break
            time.sleep(args.interval)
            os.system("clear")
    except KeyboardInterrupt:
        print("\nExiting...")
    except Exception as e:
        logging.error(f"Error: {e}")
        print(f"An error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
